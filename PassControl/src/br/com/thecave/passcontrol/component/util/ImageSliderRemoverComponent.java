/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.thecave.passcontrol.component.util;

import br.com.thecave.passcontrol.controller.Main;
import br.com.thecave.passcontrolserver.messages.administrator.AdministratorRemoveSlideImage;
import br.com.thecave.passcontrolserver.messages.generic.ConfirmationResponse;
import br.com.thecave.passcontrolserver.util.PassControlConfigurationSynchronizer;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Popup;
import javax.swing.PopupFactory;

/**
 *
 * @author guilherme
 */
public class ImageSliderRemoverComponent extends javax.swing.JPanel 
{  
    private JPanel parent;
    
    Popup popup;
    
    /**
     * Creates new form ImageSliderRemoverComponent
     */
    public ImageSliderRemoverComponent(JPanel parent) 
    {
        initComponents();
        
        loadComboBoxFromImages();
        this.parent = parent;
    }
    
    public void display()
    {
        PopupFactory factory = PopupFactory.getSharedInstance();
        popup = factory.getPopup(parent, this,10,10);
        popup.show();             
    }

    private void loadComboBoxFromImages() 
    {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        
        HashMap<String, ImageIcon> slidesMap = PassControlConfigurationSynchronizer.getInstance().getConfigurationFile().getImgsSlide();
        for (Map.Entry<String, ImageIcon> entry : slidesMap.entrySet()) 
        {
            String string = entry.getKey();
            model.addElement(string);
        }
        cbImagesName.setModel(model);       
    }    

    public String getSelectedName() 
    {
        return cbImagesName.getSelectedItem().toString();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbImagesName = new javax.swing.JComboBox();
        jbRemover = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cbImagesName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(cbImagesName, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 260, -1));

        jbRemover.setText("Remover");
        jbRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoverActionPerformed(evt);
            }
        });
        add(jbRemover, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        jbCancelar.setText("Cancelar");
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });
        add(jbCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 60, 80, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jbRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoverActionPerformed
        if (popup != null)
            popup.hide();
        someButtonPressed(true);
    }//GEN-LAST:event_jbRemoverActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        if (popup != null)
            popup.hide();
        someButtonPressed(false);
    }//GEN-LAST:event_jbCancelarActionPerformed

    protected void someButtonPressed(boolean remover)
    {
        if (remover)
        {
            AdministratorRemoveSlideImage removeSlideImage = new AdministratorRemoveSlideImage(getSelectedName());
            ConfirmationResponse response = Main.getInstance().getCommunicationThread().
                    sendMessageToServerAndWaitForResponseOrTimeout(removeSlideImage, ConfirmationResponse.class, 2000);
            
            if(response != null && response.getStatusOperation())
            {
                JOptionPane.showMessageDialog(null, "Imagem removida com sucesso!");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Conex√£o perdida com o servidor!");
            }  
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbImagesName;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbRemover;
    // End of variables declaration//GEN-END:variables

}
